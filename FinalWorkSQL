-- year, quarter, month
select
       year(l.date) as loan_year,
       quarter(l.date) as loan_quarter,
       month(l.date) as loan_month,
       count(*) as total_loans,
       sum(l.amount) as total_amount,
       avg(l.amount) as average_amount
from loan l
group by  loan_year, loan_quarter, loan_month
order by loan_year, loan_quarter, loan_month;
-- year, quarter
select
       year(l.date) as loan_year,
       quarter(l.date) as loan_quarter,
       count(*) as total_loans,
       sum(l.amount) as total_amount,
       avg(l.amount) as average_amount
from loan l
group by  loan_year, loan_quarter
order by loan_year, loan_quarter;
-- year
select
       year(l.date) as loan_year,
       count(*) as total_loans,
       sum(l.amount) as total_amount,
       avg(l.amount) as average_amount
from loan l
group by  loan_year
order by loan_year
;
-- splacené půjčky
select
    status,
    count(status)
from loan l
group by 1
order by 1;
--  analysis of accounts , number of given loans desc, amount of given loans desc, average loan amount (only fully paid)
WITH cte AS (
    SELECT
       account_id,
       sum(amount)   as loans_amount,
       count(amount) as loans_count,
       avg(amount)   as loans_avg
    FROM loan
    WHERE status IN ('A', 'C')
    GROUP BY account_id
)
SELECT
    *,
    ROW_NUMBER() over (ORDER BY loans_amount DESC) AS rank_loans_amount,
    ROW_NUMBER() over (ORDER BY loans_count DESC) AS rank_loans_count
FROM cte
;
-- fully paid loans
select sum(amount) as loans_amount,
       gender
from loan l
join client c on l.account_id = c.client_id
where l.status in ('A', 'C')
group by  gender;

-- client analysis
drop table if exists tmp_analysis;
create temporary table tmp_analysis as
select
    c.gender,
    2024 - extract(year from birth_date) as age,
    sum(l.amount) as loans_amount,
    count(l.amount) as loans_count

from loan l
inner join financial8_99.account a using (account_id)
inner join financial8_99.disp as d using (account_id)
inner join financial8_99.client as c using (client_id)
where true
and l.status in ('A', 'C')
and d.type = 'OWNER'
group by c.gender, 2
;
select gender,
       sum(loans_count) as loans_count
from tmp_analysis
group by gender
;
select gender,
       avg(age) as avg_age
from tmp_analysis
group by gender
;
-- analysis 2 district
drop table if exists tmp_distrinct_analytics;
create temporary table tmp_distrinct_analytics as
select
    a.district_id,
    count(distinct c.client_id) as customer_amount,
    sum(l.amount) as loans_amount,
    count(l.amount)as loans_count
from loan l
inner join account a using (account_id)
inner join disp as d using (account_id)
inner join client as c using (client_id)
where true
and l.status in ('A', 'C')
AND d.type = 'OWNER'
group by a.district_id
;
-- oblast s nejvíce úvěry
select *
from tmp_distrinct_analytics
order by customer_amount desc
limit 1;
select *
from tmp_distrinct_analytics
order by  loans_amount desc
limit 1
;
-- client analysis part 3
WITH cte AS (
    SELECT d2.district_id,

           count(distinct c.client_id) as customer_amount,
           sum(l.amount)               as loans_given_amount,
           count(l.amount)             as loans_given_count
    FROM
            loan as l
        INNER JOIN
            account a using (account_id)
        INNER JOIN
            disp as d using (account_id)
        INNER JOIN
            client as c using (client_id)
        INNER JOIN
            district as d2 on
                c.district_id = d2.district_id
    WHERE True
      AND l.status IN ('A', 'C')
      AND d.type = 'OWNER'
    GROUP BY d2.district_id
)
SELECT
    *,
    loans_given_amount / SUM(loans_given_amount) OVER () AS share
FROM cte
ORDER BY share DESC
limit 5
;
-- selection part 1
SELECT c.client_id,

           sum(amount - payments) as client_balance,
           count(loan_id) as loans_amount
    FROM
            loan as l
        INNER JOIN
            account a using (account_id)
        INNER JOIN
            disp as d using (account_id)
        INNER JOIN
            client as c using (client_id)
    WHERE True
      AND l.status IN ('A', 'C')
      AND d.type = 'OWNER'
    GROUP BY c.client_id
    having
        sum(amount - payments) > 1000
        and count(loan_id) > 5
;
-- expiring cards
WITH cte AS (
    SELECT
        c2.client_id,
        c.card_id,
        DATE_ADD(c.issued, interval 3 year) as expiration_date,
        d2.A3 as client_adress
    FROM
            card as c
        INNER JOIN
            disp as d using (disp_id)
        INNER JOIN
            client as c2 using (client_id)
        INNER JOIN
            district as d2 using (district_id)
)
SELECT *
FROM cte
;
CREATE TABLE cards_at_expiration
(
    client_id       int                      not null,
    card_id         int default 0            not null,
    expiration_date date                     null,
    A3              varchar(15) charset utf8 not null,
    generated_for_date date                     null
);

DELIMITER $$
DROP PROCEDURE IF EXISTS generate_cards_at_expiration_report;
CREATE PROCEDURE generate_cards_at_expiration_report(p_date DATE)
BEGIN
    TRUNCATE TABLE cards_at_expiration;
    INSERT INTO cards_at_expiration
    WITH cte AS (
        SELECT c2.client_id,
               c.card_id,
               date_add(c.issued, interval 3 year) as expiration_date,
               d2.A3
        FROM
            card as c
                 INNER JOIN
             disp as d using (disp_id)
                 INNER JOIN
             client as c2 using (client_id)
                 INNER JOIN
             district as d2 using (district_id)
    )
    SELECT
           *,
           p_date
    FROM cte
    WHERE p_date BETWEEN DATE_ADD(expiration_date, INTERVAL -7 DAY) AND expiration_date
    ;
END $$
DELIMITER ;
call generate_cards_at_expiration_report('2001-01-01');
select * from cards_at_expiration;


